"""
    This file is part of TON OS.

    TON OS is free software: you can redistribute it and/or modify
    it under the terms of the Apache License 2.0 (http://www.apache.org/licenses/)

    Copyright 2019-2021 (c) TON LABS
"""

'''

    This tutorial demonstrates how to call signed methods
    and shows how to handle errors generated by a contract

'''


import tonos_ts4.ts4 as ts4

eq = ts4.eq


class Tut06(ts4.BaseContract):
    def __init__(self):
        self.create_keypair()
        # We pass a public key to the constructor that will identify the contract owner
        super(Tut06, self).__init__('tutorial06', {}, pubkey = self.public_key_)

    # Create a method to call setNumber without the owner's signature
    def setNumber(self, value, expect_ec = 0):
        return self.call_method('setNumber', {'value': value}, expect_ec = expect_ec)

    # Create a method to call setNumber with the owner's signature
    def setNumber_signed(self, value, expect_ec = 0):
        return self.call_method_signed('setNumber', {'value': value}, expect_ec = expect_ec)


# Initialize TS4 by specifying where the artifacts of the used contracts are located
# verbose: toggle to print additional execution info
ts4.init('contracts/', verbose = True)

# Deploy a contract
tut06 = Tut06()

t_number = 123

# Call the unsigned method and expect an error because
# the owner's key is not specified and its validation failed
tut06.setNumber(t_number, expect_ec = 101)

# Check that the value has not been changed
assert eq(0, tut06.call_getter('m_number'))

# Сall the method by message that signed with owner key
tut06.setNumber_signed(t_number)

# Check that the value has changed
assert eq(t_number, tut06.call_getter('m_number'))

# Set a new keypair in the contract that is different
# from the one that the contract was deployed with
tut06.create_keypair()

# Сall the method by message that signed with foreign key
# and expect an error because the owner's key validation failed
tut06.setNumber_signed(t_number * 2, expect_ec = 101)

# Check that the value has not changed
assert eq(t_number, tut06.call_getter('m_number'))
